From a51168ce9ab849f857efd96eae66cff5247a45a4 Mon Sep 17 00:00:00 2001
From: t_feng <fengtao40@huawei.com>
Date: Thu, 18 Jun 2020 17:35:01 +0800
Subject: [PATCH] disable set passwd without confirmation

---
 pyanaconda/input_checking.py | 4 ++++
 tests/nosetests/pyanaconda_tests/password_quality_test.py  | 18 ++++++++++++++++++
 2 file changed, 22 insertions(+)

diff --git a/pyanaconda/input_checking.py b/pyanaconda/input_checking.py
index 9efbd7b..b0fd605 100644
--- a/pyanaconda/input_checking.py
+++ b/pyanaconda/input_checking.py
@@ -412,6 +412,10 @@ class PasswordValidityCheck(InputCheck):
             pw_score = 4
             status_text = _(constants.SecretStatus.STRONG.value)
 
+        #disable set password without confirnation
+        if not error_message and not check_request.password_confirmation:
+            error_message = _(constants.SECRET_CONFIRM_ERROR_GUI[check_request.secret_type])
+
         # the policy influences the overall success of the check
         # - score 0 & strict == True -> success = False
         # - score 0 & strict == False -> success = True
diff --git a/tests/nosetests/pyanaconda_tests/password_quality_test.py b/tests/nosetests/pyanaconda_tests/password_quality_test.py
index d6c4810..4137586 100644
--- a/tests/nosetests/pyanaconda_tests/password_quality_test.py
+++ b/tests/nosetests/pyanaconda_tests/password_quality_test.py
@@ -33,6 +33,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = ""
+        request.password_confirmation = ""
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 1)  # empty password is fine with emptyok policy
@@ -44,6 +45,7 @@ class PasswordQuality(unittest.TestCase):
         request.policy = get_policy()
         request.policy.minlen = 10
         request.password = ""
+        request.password_confirmation = ""
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 1)
@@ -57,6 +59,7 @@ class PasswordQuality(unittest.TestCase):
         request.policy = get_policy()
         request.policy.emptyok = True
         request.password = ""
+        request.password_confirmation = ""
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 1)
@@ -69,6 +72,7 @@ class PasswordQuality(unittest.TestCase):
         request.policy.emptyok = True
         request.policy.minlen = 10
         request.password = ""
+        request.password_confirmation = ""
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 1)
@@ -81,6 +85,7 @@ class PasswordQuality(unittest.TestCase):
         request.policy.emptyok = True
         request.policy.minlen = 10
         request.password = "123"
+        request.password_confirmation = "123"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 0)
@@ -93,6 +98,7 @@ class PasswordQuality(unittest.TestCase):
         request.policy.emptyok = True
         request.policy.minlen = 10
         request.password = "1234567891"
+        request.password_confirmation = "1234567891"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 1)
@@ -107,6 +113,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = "123"
+        request.password_confirmation = "123"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 0)
@@ -116,6 +123,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = "123456"
+        request.password_confirmation = "123456"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 1)
@@ -126,6 +134,7 @@ class PasswordQuality(unittest.TestCase):
         request.policy = get_policy()
         request.policy.minlen = 10
         request.password = "12345"
+        request.password_confirmation = "12345"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 0)
@@ -134,6 +143,7 @@ class PasswordQuality(unittest.TestCase):
         request.policy = get_policy()
         request.policy.minlen = 10
         request.password = "1234567891"
+        request.password_confirmation = "1234567891"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertGreater(check.result.password_score, 0)
@@ -145,6 +155,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = " "
+        request.password_confirmation = " "
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertEqual(check.result.password_score, 0)
@@ -156,6 +167,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = "anaconda"
+        request.password_confirmation = "anaconda"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertGreater(check.result.password_score, 0)
@@ -168,6 +180,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = "jelenovipivonelej"
+        request.password_confirmation = "jelenovipivonelej"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertGreater(check.result.password_score, 0)
@@ -180,6 +193,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = "4naconda-"
+        request.password_confirmation = "4naconda-"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertIs(check.result.error_message, "")
@@ -188,6 +202,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = "4naconda----"
+        request.password_confirmation = "4naconda----"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertIs(check.result.error_message, "")
@@ -196,6 +211,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = "----4naconda----"
+        request.password_confirmation = "----4naconda----"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         self.assertIs(check.result.error_message, "")
@@ -204,6 +220,7 @@ class PasswordQuality(unittest.TestCase):
         request = input_checking.PasswordCheckRequest()
         request.policy = get_policy()
         request.password = "?----4naconda----?"
+        request.password_confirmation = "?----4naconda----?"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
 
@@ -218,6 +235,7 @@ class PasswordQuality(unittest.TestCase):
         request.policy = get_policy()
         request.policy.minlen = 10
         request.password = "!?----4naconda----?!"
+        request.password_confirmation = "!?----4naconda----?!"
         check = input_checking.PasswordValidityCheck()
         check.run(request)
         # this should (hopefully) give quality 100 everywhere
-- 
2.23.0

